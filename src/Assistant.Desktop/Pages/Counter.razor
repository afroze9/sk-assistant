@* @page "/chat" *@
@* @using Microsoft.Fast.Components.FluentUI *@
@* *@
@* <div class="chat-container"> *@
@*     <!-- Left sidebar with chat history --> *@
@*     <div class="chat-sidebar"> *@
@*         <FluentButton Appearance="Appearance.Lightweight"  *@
@*                       IconStart="@(new Icons.Regular.Size16.Add())"  *@
@*                       OnClick="StartNewChat" *@
@*                       Class="new-chat-button"> *@
@*             New Chat *@
@*         </FluentButton> *@
@* *@
@*         <FluentDivider Class="mt-2 mb-2" /> *@
@* *@
@*         <div class="chat-history"> *@
@*             @foreach (var chat in ChatHistory) *@
@*             { *@
@*                 <FluentButton Appearance="Appearance.Subtle" *@
@*                              Class="chat-history-item @(chat.Id == CurrentChatId ? "selected" : "")" *@
@*                              OnClick="@(() => LoadChat(chat.Id))"> *@
@*                     <div class="chat-history-content"> *@
@*                         <span class="chat-title">@chat.Title</span> *@
@*                         <span class="chat-preview">@chat.Preview</span> *@
@*                     </div> *@
@*                 </FluentButton> *@
@*             } *@
@*         </div> *@
@*     </div> *@
@* *@
@*     <!-- Main chat area --> *@
@*     <div class="chat-main"> *@
@*         <!-- Messages area --> *@
@*         <div class="messages-container" @ref="messagesRef"> *@
@*             @foreach (var message in Messages) *@
@*             { *@
@*                 <div class="message @(message.IsUser ? "user" : "assistant")"> *@
@*                     <div class="message-avatar"> *@
@*                         @if (message.IsUser) *@
@*                         { *@
@*                             <FluentIcon Value="@(new Icons.Regular.Size24.Person())" /> *@
@*                         } *@
@*                         else *@
@*                         { *@
@*                             <FluentIcon Value="@(new Icons.Regular.Size24.Bot())" /> *@
@*                         } *@
@*                     </div> *@
@*                     <div class="message-content"> *@
@*                         @message.Content *@
@*                     </div> *@
@*                 </div> *@
@*             } *@
@*         </div> *@
@* *@
@*         <!-- Input area --> *@
@*         <div class="input-container"> *@
@*             <FluentTextArea @bind-Value="@CurrentMessage" *@
@*                            Placeholder="Type a message..." *@
@*                            @onkeydown="@HandleKeyPress" *@
@*                            Resize="TextAreaResize.Vertical" *@
@*                            Class="message-input" /> *@
@*              *@
@*             <div class="input-buttons"> *@
@*                 <FluentButton IconStart="@(new Icons.Regular.Size20.Mic())" *@
@*                              OnClick="StartVoiceInput" *@
@*                              Appearance="Appearance.Lightweight" *@
@*                              Class="voice-button" /> *@
@*                  *@
@*                 <FluentButton IconStart="@(new Icons.Regular.Size20.Send())" *@
@*                              OnClick="SendMessage" *@
@*                              Appearance="Appearance.Accent" *@
@*                              Disabled="@string.IsNullOrWhiteSpace(CurrentMessage)" *@
@*                              Class="send-button" /> *@
@*             </div> *@
@*         </div> *@
@*     </div> *@
@* </div> *@
@* *@
@* <style> *@
@*     .chat-container { *@
@*         display: flex; *@
@*         height: 100vh; *@
@*         overflow: hidden; *@
@*     } *@
@* *@
@*     .chat-sidebar { *@
@*         width: 260px; *@
@*         border-right: 1px solid var(--neutral-stroke-divider-rest); *@
@*         padding: 1rem; *@
@*         display: flex; *@
@*         flex-direction: column; *@
@*     } *@
@* *@
@*     .new-chat-button { *@
@*         width: 100%; *@
@*     } *@
@* *@
@*     .chat-history { *@
@*         overflow-y: auto; *@
@*         flex-grow: 1; *@
@*     } *@
@* *@
@*     .chat-history-item { *@
@*         width: 100%; *@
@*         text-align: left; *@
@*         margin-bottom: 0.5rem; *@
@*         padding: 0.5rem; *@
@*     } *@
@* *@
@*     .chat-history-item.selected { *@
@*         background-color: var(--neutral-fill-secondary-rest); *@
@*     } *@
@* *@
@*     .chat-history-content { *@
@*         display: flex; *@
@*         flex-direction: column; *@
@*     } *@
@* *@
@*     .chat-title { *@
@*         font-weight: 600; *@
@*     } *@
@* *@
@*     .chat-preview { *@
@*         font-size: 0.875rem; *@
@*         color: var(--neutral-foreground-hint); *@
@*         white-space: nowrap; *@
@*         overflow: hidden; *@
@*         text-overflow: ellipsis; *@
@*     } *@
@* *@
@*     .chat-main { *@
@*         flex-grow: 1; *@
@*         display: flex; *@
@*         flex-direction: column; *@
@*         height: 100%; *@
@*     } *@
@* *@
@*     .messages-container { *@
@*         flex-grow: 1; *@
@*         overflow-y: auto; *@
@*         padding: 1rem; *@
@*     } *@
@* *@
@*     .message { *@
@*         display: flex; *@
@*         margin-bottom: 1.5rem; *@
@*         gap: 1rem; *@
@*     } *@
@* *@
@*     .message-avatar { *@
@*         width: 30px; *@
@*         height: 30px; *@
@*         display: flex; *@
@*         align-items: center; *@
@*         justify-content: center; *@
@*         background-color: var(--neutral-fill-secondary-rest); *@
@*         border-radius: 4px; *@
@*     } *@
@* *@
@*     .message-content { *@
@*         flex-grow: 1; *@
@*         padding: 0.75rem; *@
@*         border-radius: 8px; *@
@*         background-color: var(--neutral-fill-secondary-rest); *@
@*     } *@
@* *@
@*     .message.user .message-content { *@
@*         background-color: var(--accent-fill-rest); *@
@*         color: var(--accent-foreground-rest); *@
@*     } *@
@* *@
@*     .input-container { *@
@*         padding: 1rem; *@
@*         border-top: 1px solid var(--neutral-stroke-divider-rest); *@
@*     } *@
@* *@
@*     .message-input { *@
@*         width: 100%; *@
@*         margin-bottom: 0.5rem; *@
@*         min-height: 60px; *@
@*     } *@
@* *@
@*     .input-buttons { *@
@*         display: flex; *@
@*         justify-content: flex-end; *@
@*         gap: 0.5rem; *@
@*     } *@
@* </style> *@
@* *@
@* @code { *@
@*     private ElementReference messagesRef; *@
@*     private string CurrentMessage { get; set; } = ""; *@
@*     private string CurrentChatId { get; set; } = "1"; *@
@*     private List<Message> Messages { get; set; } = new(); *@
@*     private List<ChatHistory> ChatHistory { get; set; } = new(); *@
@* *@
@*     protected override void OnInitialized() *@
@*     { *@
@*         // Initialize with sample data *@
@*         ChatHistory = new List<ChatHistory> *@
@*         { *@
@*             new() { Id = "1", Title = "First Chat", Preview = "How can I help you today?" }, *@
@*             new() { Id = "2", Title = "Project Discussion", Preview = "Let's talk about the new features..." } *@
@*         }; *@
@* *@
@*         Messages = new List<Message> *@
@*         { *@
@*             new() { IsUser = false, Content = "Hello! How can I help you today?" }, *@
@*             new() { IsUser = true, Content = "I need help with Blazor." } *@
@*         }; *@
@*     } *@
@* *@
@*     private async Task ScrollToBottom() *@
@*     { *@
@*         await JS.InvokeVoidAsync("scrollToBottom", messagesRef); *@
@*     } *@
@* *@
@*     private async Task HandleKeyPress(KeyboardEventArgs e) *@
@*     { *@
@*         if (e.Key == "Enter" && !e.ShiftKey) *@
@*         { *@
@*             await SendMessage(); *@
@*         } *@
@*     } *@
@* *@
@*     private async Task SendMessage() *@
@*     { *@
@*         if (string.IsNullOrWhiteSpace(CurrentMessage)) *@
@*             return; *@
@* *@
@*         Messages.Add(new Message { IsUser = true, Content = CurrentMessage }); *@
@*         CurrentMessage = ""; *@
@*         StateHasChanged(); *@
@*         await ScrollToBottom(); *@
@* *@
@*         // Simulate assistant response *@
@*         await Task.Delay(1000); *@
@*         Messages.Add(new Message { IsUser = false, Content = "This is a simulated response." }); *@
@*         StateHasChanged(); *@
@*         await ScrollToBottom(); *@
@*     } *@
@* *@
@*     private void StartNewChat() *@
@*     { *@
@*         Messages.Clear(); *@
@*         CurrentChatId = Guid.NewGuid().ToString(); *@
@*         Messages.Add(new Message { IsUser = false, Content = "How can I help you today?" }); *@
@*     } *@
@* *@
@*     private void LoadChat(string chatId) *@
@*     { *@
@*         CurrentChatId = chatId; *@
@*         // Load chat messages from your data source *@
@*     } *@
@* *@
@*     private void StartVoiceInput() *@
@*     { *@
@*         // Implement voice input functionality *@
@*     } *@
@* *@
@*     private class Message *@
@*     { *@
@*         public bool IsUser { get; set; } *@
@*         public string Content { get; set; } *@
@*     } *@
@* *@
@*     private class ChatHistory *@
@*     { *@
@*         public string Id { get; set; } *@
@*         public string Title { get; set; } *@
@*         public string Preview { get; set; } *@
@*     } *@
@* } *@