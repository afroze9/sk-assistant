@page "/"
@using Microsoft.JSInterop
@using Message = Assistant.Desktop.Entities.Message
@using Assistant.Desktop.Components
@using Assistant.Desktop.Data
@using Assistant.Desktop.Entities
@using Assistant.Desktop.State
@using Microsoft.EntityFrameworkCore
@inject IJSRuntime JS
@inject Services.IAiService AiService
@inject ApplicationDbContext Context

<PageTitle>Chat</PageTitle>

<FluentStack Orientation="Orientation.Horizontal">
    <FluentStack Orientation="Orientation.Vertical" Style="height: 100vh; width: 300px">
        <FluentStack Orientation="Orientation.Horizontal" Style="padding: 1rem">
            <FluentButton Appearance="Appearance.Accent" IconStart="@(new Icons.Regular.Size24.ChatAdd())" Style="width: 100%" OnClick="NewChat">New Chat</FluentButton>
        </FluentStack>
        <FluentStack Orientation="Orientation.Vertical" Style="overflow-y: auto; overflow-x: hidden;">
            <FluentNavMenu Width="286" Style="padding: 1rem">
                @foreach (var group in GetConversationGroups())
                {
                    <FluentLabel>@group.Key</FluentLabel>
                    @foreach (var conversation in group.Value)
                    {
                        <FluentNavLink
                            OnClick="() => LoadConversation(conversation.Id)"
                            Icon="GetNavIcon(conversation.Id)"
                            Tooltip="@conversation.Title">
                            @conversation.Title
                        </FluentNavLink>
                    }

                    <FluentDivider Style="width: 100%; margin-bottom: 1rem" Role="DividerRole.Presentation"></FluentDivider>
                }
            </FluentNavMenu>
        </FluentStack>
    </FluentStack>
    <FluentStack Orientation="Orientation.Vertical" Style="height: 100vh; width: 100%">
        <div class="messages-container" @ref="messagesRef">
            @foreach (var message in AppState.GetCurrentConversation()?.Messages ?? [])
            {
                <FluentCard Class="@GetCardClass(message.Role)">
                    <FluentStack Orientation="Orientation.Horizontal" Style="gap: 1rem">
                        <FluentIcon Value="@GetRoleIcon(message.Role)"></FluentIcon>
                        <FluentLabel>@(message.Role == Message.ChatMessageRole.User ? AppState.GetUserState().UserDisplayName : message.Role.ToString())</FluentLabel>
                    </FluentStack>
                    @if (IsMarkdown(message.Content))
                    {
                        <MarkdownSection Content="@message.Content"/>
                    }
                    else
                    {
                        <FluentLabel Typo="Typography.Body">
                            @message.Content
                        </FluentLabel>
                    }
                </FluentCard>
            }
            @if (IsLoading)
            {
                <FluentCard Class="@GetCardClass(Message.ChatMessageRole.System)">
                    <FluentStack Orientation="Orientation.Horizontal" Style="gap: 1rem">
                        <FluentIcon Value="@GetRoleIcon(Message.ChatMessageRole.System)"></FluentIcon>
                        <FluentLabel>Thinking</FluentLabel>
                    </FluentStack>
                    <FluentLabel Style="margin-top: 1rem">
                        <FluentSkeleton Height="30px" Width="100%" Shimmer="true"></FluentSkeleton>
                    </FluentLabel>
                </FluentCard>
            }
        </div>

        <FluentStack Orientation="Orientation.Horizontal" Class="input-container">
            <FluentTextArea
                Immediate="true"
                @bind-Value="@CurrentMessage"
                @onkeypress="HandleKeyPress"
                Placeholder="Type a message..."
                Resize="TextAreaResize.Vertical"
                Rows="6"
                Class="message-input"/>
            <div class="input-buttons">
                <FluentButton
                    IconStart="@(new Icons.Regular.Size24.Mic())"
                    OnClick="ToggleVoiceInput"
                    Appearance="Appearance.Lightweight"
                    Title="Voice Input"/>
                <FluentButton
                    IconStart="@(new Icons.Regular.Size24.Send())"
                    OnClick="SendMessage"
                    Appearance="Appearance.Lightweight"
                    Title="Send Message"/>
            </div>
        </FluentStack>
    </FluentStack>
</FluentStack>

<style>
    .messages-container { 
        overflow-y: auto;
        padding: 1rem;
        scroll-behavior: smooth;
        width: 100%;
        gap: 1rem;
        display: flex;
        flex-direction: column;
    }
    .message {
        width: 80%;
        gap: 1rem;
        animation: message-fade-in 0.3s ease-out;
        display: flex;
        flex-direction: column;
    }
    
    .message.user {
        margin-left: auto;
    }
    
    .input-container {
        margin-top: auto;
        padding: 1rem;
    }
    
    .message-input {
        width: 100%;
        margin-bottom: 0.5rem;
    }

    .input-buttons {
        display: flex;
        flex-direction: column;
        justify-content: flex-end;
        gap: 0.5rem;
    }

</style>

@code
{
    [Inject] private AppState AppState { get; set; } = default!;
    private ElementReference messagesRef;
    private bool IsLoading { get; set; } = false;
    private string CurrentMessage { get; set; } = "";

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e is { Key: "Enter", ShiftKey: false })
        {
            await SendMessage();
        }
    }

    private async Task ScrollToBottom()
    {
        await JS.InvokeVoidAsync("scrollToBottom", messagesRef);
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(CurrentMessage))
        {
            return;
        }

        AppState.AddMessageToCurrentConversation(new Message()
        {
            Content = CurrentMessage,
            Role = Message.ChatMessageRole.User,
        });

        await ScrollToBottom();
        await ClearInput();

        await ToggleLoading(true);

        Conversation? currentConv = AppState.GetCurrentConversation();
        if (currentConv is { Messages: [{ Role: Message.ChatMessageRole.System }, { Role: Message.ChatMessageRole.User }] })
        {
            if (!await Context.Conversations.AnyAsync(x => x.Id == currentConv.Id))
            {
                currentConv.Title = await GetConversationTitle(currentConv.Messages.Last().Content);
                await Context.Conversations.AddAsync(currentConv);
                await Context.SaveChangesAsync();
                AppState.SetCurrentConversation(currentConv);
                AppState.AddCurrentConversationToList(currentConv);
            }
        }

        await CallAiService();
        await ToggleLoading(false);
    }

    private async Task<string> GetConversationTitle(string message)
    {
        return (await AiService.GenerateChatTitleAsync(message)).Content;
    }

    private async Task ToggleLoading(bool isLoading)
    {
        IsLoading = isLoading;
        StateHasChanged();
    }

    private async Task CallAiService()
    {
        var currentConversation = AppState.GetCurrentConversation();
        if (currentConversation == null)
        {
            return;
        }

        List<Message>? messages = currentConversation.Messages;
        if (messages.Count == 0)
        {
            return;
        }

        Message response = await AiService.GenerateAsync(messages);
        AppState.AddMessageToCurrentConversation(response);

        Conversation? convToUpdate = await Context.Conversations.FindAsync(currentConversation.Id);
        if (convToUpdate != null)
        {
            await Context.SaveChangesAsync();
        }

        StateHasChanged();
        await ScrollToBottom();
    }

    public async Task ToggleVoiceInput()
    {
        Console.WriteLine("Voice input not implemented yet");
    }

    private async Task ClearInput()
    {
        CurrentMessage = string.Empty;
        StateHasChanged();
    }

    private string GetCardClass(Message.ChatMessageRole role)
    {
        return $"message {role.ToString().ToLower()}";
    }

    private Icon GetNavIcon(string conversationId)
    {
        if (AppState.GetCurrentConversation()?.Id == conversationId)
        {
            return new Icons.Regular.Size20.ArrowCircleRight();
        }

        return new Icons.Regular.Size20.LineHorizontal1Dashes();
    }

    private Icon GetRoleIcon(Message.ChatMessageRole role)
    {
        return role switch
        {
            Message.ChatMessageRole.User => new Icons.Regular.Size24.Person(),
            Message.ChatMessageRole.Assistant => new Icons.Regular.Size24.Bot(),
            Message.ChatMessageRole.System => new Icons.Regular.Size24.Desktop(),
            Message.ChatMessageRole.Tool => new Icons.Regular.Size24.WrenchScrewdriver(),
            _ => new Icons.Regular.Size24.Warning(),
        };
    }

    private bool IsMarkdown(string input)
    {
        if (string.IsNullOrWhiteSpace(input))
        {
            return false;
        }

        // Simple checks for common Markdown syntax
        string[] markdownIndicators = { "#", "*", "-", "_", "`", ">", "[", "]", "(", ")", "!", "```" };
        foreach (var indicator in markdownIndicators)
        {
            if (input.Contains(indicator))
            {
                return true;
            }
        }

        return false;
    }

    private Dictionary<string, List<Conversation>> GetConversationGroups()
    {
        Dictionary<string, List<Conversation>> groups = new();

        List<Conversation> conversations = AppState.Conversations.OrderByDescending(x => x.CreatedAt).ToList();
        if (conversations.Count == 0)
        {
            return groups;
        }

        DateTime today = DateTime.Today;
        DateTime yesterday = today.AddDays(-1);
        DateTime lastWeek = today.AddDays(-7);
        DateTime lastMonth = today.AddDays(-30);

        List<Conversation> todayConversations = conversations.Where(x => x.CreatedAt.Date == today).ToList();
        List<Conversation> yesterdayConversations = conversations.Where(x => x.CreatedAt.Date == yesterday).ToList();
        List<Conversation> lastWeekConversations = conversations.Where(x => x.CreatedAt.Date > lastWeek && x.CreatedAt.Date < yesterday).ToList();
        List<Conversation> lastMonthConversations = conversations.Where(x => x.CreatedAt.Date > lastMonth && x.CreatedAt.Date < lastWeek).ToList();

        if (todayConversations.Any()) groups.Add("Today", todayConversations);
        if (yesterdayConversations.Any()) groups.Add("Yesterday", yesterdayConversations);
        if (lastWeekConversations.Any()) groups.Add("Last 7 days", lastWeekConversations);
        if (lastMonthConversations.Any()) groups.Add("Last 30 days", lastMonthConversations);

        return groups;
    }

    private async Task LoadConversation(string conversationId)
    {
        if (AppState.GetCurrentConversation()?.Id == conversationId)
        {
            return;
        }

        Conversation? dbConversation = await Context.Conversations
            .Where(x => x.Id == conversationId)
            .Include(x => x.Messages)
            .FirstOrDefaultAsync();

        if (dbConversation == null)
        {
            Console.WriteLine($"Could not find conversation with id {conversationId}");
            return;
        }

        dbConversation.Messages = dbConversation.Messages.OrderBy(x => x.CreatedAt).ToList();

        AppState.SetCurrentConversation(dbConversation);
        StateHasChanged();
        await ScrollToBottom();
    }

    protected override async Task OnInitializedAsync()
    {
        if (AppState.GetCurrentConversation()?.Messages.Count == 0)
        {
            AppState.AddMessageToCurrentConversation(new Message
            {
                Content = SystemPrompt,
                Role = Message.ChatMessageRole.System,
            });
        }

        // Load conversations
        if (AppState.Conversations.Count == 0)
        {
            List<Conversation> conversations = await Context.Conversations
                .Where(x => x.CreatedAt >= DateTime.Today.AddDays(-30))
                .OrderByDescending(x => x.CreatedAt)
                .Take(50)
                .ToListAsync();
            AppState.SetConversations(conversations);
        }
    }

    private void NewChat()
    {
        Conversation newConversation = new Conversation()
        {
            Messages =
            [
                new Message
                {
                    Content = SystemPrompt,
                    Role = Message.ChatMessageRole.System,
                }
            ],
            Title = "New Chat",
        };
        AppState.SetCurrentConversation(newConversation);
    }

    private const string SystemPrompt = "You are an efficient assistant and respond with only whats needed and nothing else. Try and save important information to the knowledgebase as much as possible. And use it to help answer questions where needed.";
}