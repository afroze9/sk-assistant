@page "/"
@using Microsoft.JSInterop
@using Markdig
@using Message = Assistant.Desktop.Entities.Message
@using Assistant.Desktop.Components
@using Assistant.Desktop.State
@inject IJSRuntime JS
@inject Services.IAiService AiService

<PageTitle>Home</PageTitle>

<FluentStack Orientation="Orientation.Horizontal">
    <FluentStack Orientation="Orientation.Vertical" Style="height: 100vh; width: 256px">
        <FluentStack Orientation="Orientation.Horizontal" Style="padding: 12px">
            <FluentButton Appearance="Appearance.Accent" IconStart="@(new Icons.Regular.Size24.ChatAdd())" Style="width: 100%">New Chat</FluentButton>
        </FluentStack>
        <FluentStack Orientation="Orientation.Vertical" Style="overflow-y: auto; overflow-x: hidden;">
            <FluentNavMenu Width="240" Style="padding-bottom: 12px">
                <FluentLabel>Group</FluentLabel>
                <FluentDivider Style="width: 100%;" Role="DividerRole.Presentation"></FluentDivider>
                <FluentNavLink>Chat1Chat1Chat1Chat1Chat1Chat1Chat1Chat1Chat1Chat1</FluentNavLink>
                <FluentNavLink>Chat2</FluentNavLink>
            </FluentNavMenu>
        </FluentStack>
    </FluentStack>
    <FluentStack Orientation="Orientation.Vertical" Style="height: 100vh; width: 100%">
        <div class="messages-container" @ref="messagesRef">
            @foreach (var message in Messages)
            {
                <FluentCard Class="@GetCardClass(message.Role)">
                    <FluentStack Orientation="Orientation.Horizontal" Style="gap: 1rem">
                        <FluentIcon Value="@GetRoleIcon(message.Role)"></FluentIcon>
                        <FluentLabel>@(message.Role == Message.ChatMessageRole.User ? AppState.GetUserState().UserDisplayName : message.Role.ToString())</FluentLabel>
                    </FluentStack>
                    @if (IsMarkdown(message.Content))
                    {
                        <MarkdownSection Content="@message.Content"/>
                    }
                    else
                    {
                        <FluentLabel Typo="Typography.Body" Style="margin-top: 1rem">
                            @message.Content
                        </FluentLabel>
                    }
                </FluentCard>
            }
            @if (IsLoading)
            {
                <FluentCard Class="@GetCardClass(Message.ChatMessageRole.System)">
                    <FluentStack Orientation="Orientation.Horizontal" Style="gap: 1rem">
                        <FluentIcon Value="@GetRoleIcon(Message.ChatMessageRole.System)"></FluentIcon>
                        <FluentLabel>Thinking</FluentLabel>
                    </FluentStack>
                    <FluentLabel Style="margin-top: 1rem">
                    <FluentSkeleton Height="30px" Width="100%" Shimmer="true"></FluentSkeleton>
                    </FluentLabel>
                </FluentCard>
            }
        </div>

        <FluentStack Orientation="Orientation.Horizontal" Class="input-container">
            <FluentTextArea
                Immediate="true"
                @bind-Value="@CurrentMessage"
                @onkeypress="HandleKeyPress"
                Placeholder="Type a message..."
                Resize="TextAreaResize.Vertical"
                Rows="6"
                Class="message-input"/>
            <div class="input-buttons">
                <FluentButton
                    IconStart="@(new Icons.Regular.Size24.Mic())"
                    OnClick="ToggleVoiceInput"
                    Appearance="Appearance.Lightweight"
                    Title="Voice Input"/>
                <FluentButton
                    IconStart="@(new Icons.Regular.Size24.Send())"
                    OnClick="SendMessage"
                    Appearance="Appearance.Lightweight"
                    Title="Send Message"/>
            </div>
        </FluentStack>
    </FluentStack>
</FluentStack>

<style>
    .messages-container { 
        overflow-y: auto;
        padding: 1rem;
        scroll-behavior: smooth;
        width: 100%;
        gap: 1rem;
        display: flex;
        flex-direction: column;
    }
    .message {
        width: 80%;
        gap: 1rem;
        animation: message-fade-in 0.3s ease-out;
    }
    
    .message.user {
        margin-left: auto;
    }
    
    .input-container {
        margin-top: auto;
        padding: 1rem;
    }
    
    .message-input {
        width: 100%;
        margin-bottom: 0.5rem;
    }

    .input-buttons {
        display: flex;
        flex-direction: column;
        justify-content: flex-end;
        gap: 0.5rem;
    }

</style>

@code
{
    [Inject]
    private AppState AppState { get; set; } = default!;
    private ElementReference messagesRef;
    private List<Message> Messages { get; set; } = [];
    private bool IsLoading { get; set; } = false;
    private string CurrentMessage { get; set; } = "";

    private string ToMarkdown(string input)
    {
        var html = Markdown.ToHtml(input);
        return html;
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e is { Key: "Enter", ShiftKey: false })
        {
            await SendMessage();
        }
    }

    private async Task ScrollToBottom()
    {
        await JS.InvokeVoidAsync("scrollToBottom", messagesRef);
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(CurrentMessage))
        {
            return;
        }

        Messages.Add(new Message()
        {
            Content = CurrentMessage,
            Role = Message.ChatMessageRole.User,
        });

        await ScrollToBottom();
        await ClearInput();

        await ToggleLoading(true);
        await CallAiService();
        await ToggleLoading(false);
    }

    private async Task ToggleLoading(bool isLoading)
    {
        IsLoading = isLoading;
        StateHasChanged();
    }

    public async Task CallAiService()
    {
        Message response = await AiService.GenerateAsync(Messages);
        Messages.Add(response);
        StateHasChanged();
        await ScrollToBottom();
    }

    public async Task ToggleVoiceInput()
    {
        Console.WriteLine("Voice input not implemented yet");
    }

    private async Task ClearInput()
    {
        CurrentMessage = string.Empty;
        StateHasChanged();
    }

    private string GetCardClass(Message.ChatMessageRole role)
    {
        return $"message {role.ToString().ToLower()}";
    }

    private Icon GetRoleIcon(Message.ChatMessageRole role)
    {
        return role switch
        {
            Message.ChatMessageRole.User => new Icons.Regular.Size24.Person(),
            Message.ChatMessageRole.Assistant => new Icons.Regular.Size24.Bot(),
            Message.ChatMessageRole.System => new Icons.Regular.Size24.Desktop(),
            Message.ChatMessageRole.Tool => new Icons.Regular.Size24.WrenchScrewdriver(),
            _ => new Icons.Regular.Size24.Warning(),
        };
    }

    protected override void OnInitialized()
    {
        Messages.Add(new Message()
        {
            Content = "You are an efficient assistant and respond with only whats needed and nothing else. Save and get information from the knowledge base as needed",
            Role = Message.ChatMessageRole.System,
        });
    }

    public bool IsMarkdown(string input)
    {
        if (string.IsNullOrWhiteSpace(input))
        {
            return false;
        }

        // Simple checks for common Markdown syntax
        string[] markdownIndicators = { "#", "*", "-", "_", "`", ">", "[", "]", "(", ")", "!", "```" };
        foreach (var indicator in markdownIndicators)
        {
            if (input.Contains(indicator))
            {
                return true;
            }
        }

        return false;
    }

}